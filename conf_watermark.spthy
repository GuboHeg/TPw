theory watermarks
begin
builtins : signing, diffie-hellman, hashing, asymmetric-encryption

/*
	Protocol : Secure Verification of Watermarks Embedded into ML models
	Paper : URL TBD, K.Kapusta .al

	Modeler : Hugo Beguinet
	Date : April 2021
	
	Status : Simplified Modelisation, Working

	R: Requester
	V: Verifier
	S: Suspect
	
	R <-> V <-> S

	R : Gen k_r, (sk, pk), i1 (image), b1 (watermark bit)
	S : Gen K_s
	
	R --> V : <pk, i1, T_R, aenc{b1}pk> with l_r = NN_R(i1) and T_R = h(<i1, l_r>)^k_r
	
	V --> S : <i1, T_R>
	S --> V : <P_S, T_RS > with l_s = NN_S(i1) and P_S = h(<i1, l_s>)^k_s and T_RS = T_R^k_s

	V --> R : <P_S>
	R --> V : <P_SR> with P_SR = P_S^k_R
	
	V: Compares P_SR and T_RS
	V: [P_SR=T_RS] Gen r a pad. Hom_Sum=Sum(aenc{b1}pk, aenc{r}pk) and homomorphic encryption for Sum()
	
	V --> R : <Sum> 
	R --> V : <Decr_Sum> with Decr_Sum = b1 + r (Verification that R has the private key sk)
	V : Substract r to Decr_Sum.

*/

functions : hom/3, add_inner/2, minus_inner/2, add_outer/2, NN_R/1 [private], NN_S/1 [private]
equations : hom(add_outer(aenc{a}pk, aenc{b}pk), sk, pk) = add_inner(adec(aenc{a}pk,sk), adec(aenc{b}pk,sk))
	, add_inner(a,b) = add_inner(b,a)
	, add_inner(a, add_inner(b,c)) = add_inner(add_inner(a,b), c)
	, minus_inner(a, 0) = a
	, add_inner(a, minus_inner(0, a)) = 0
	, add_inner(a, 0) = a
	, add_outer(a,b) = add_outer(b,a)
	, add_outer(a, add_outer(b,c)) = add_outer(add_outer(a,b), c)
	, add_outer(a, 0) = a

restriction Equal : "All a b #i. Eq(a,b)@#i ==> a=b"
//restriction NotEqual : "All a b #i. Neq(a,b)@#i ==> not(a=b)"


/***************** STEP 0: INITIALIZATION ******************/
rule R_Init:
	[Fr(~sk), Fr(~k_r), Fr(~i1), Fr(~b1)]
	--[Watermark($R, ~b1)
	, Aexp(~k_r)]->
	[St_R_Init($R, $V, ~sk, ~k_r, ~i1, ~b1)]



rule S_Init:
	[Fr(~k_s)]
	--[Aexp(~k_s)]->
	[St_S_Init($S, $V, ~k_s)]

rule V_Init:
	[]
	--[]->
	[St_V($V, $R, $S)]


/***************** STEP 1  ******************/
rule R_verif_send:
	let
	pk = pk(sk)
	t_r = < <h(<i1, NN_R(i1)>)^k_r>, <aenc{b1}pk(sk)>>
	in
	[ St_R_Init(R, V,sk, k_r, i1, b1)]
	--[Label(NN_R(i1))]->
	[Out(<R, V,pk, i1, t_r>)
	, St_R_verif_send(R, V,sk, k_r, b1)]

/***************** STEP 1 --> STEP 3 ******************/
rule V_querying_S:
	let
	exchange_in = <R, V,pk, i1, <a/*h(a)^k*/, ab>>
	t_r = </*h(a)^k*/ a, ab>
	exchange_out = <V,S,i1, a/*h(a)^k*/>
	in
	[In(exchange_in) 
	, St_V(V, R,S)]
	--[]->
	[Out(exchange_out)
	, St_V_Init(V, R, S, pk, i1, t_r)]

/***************** STEP 3 --> STEP 4 ******************/
rule S_V_query_recv:
	let
	exchange_in = <V,S, i1, h(a)^k>
	h1 = h(a)^k
	ps = h(<i1, NN_S(i1)>)^ks
	exchange_out = <S,V,h1^ks, ps>
	in
	[In(exchange_in)
	, St_S_Init(S, V, ks)]
	--[Label(NN_S(i1))]->
	[St_S_Init2(S, V,ks)
	, Out(exchange_out)]

/***************** STEP 4 --> STEP 5 ******************/
rule V_Recv_S:
	let
	exchange_in = <S,V, trs, ps>
	exchange_out = <V,R, ps> 
	in
	[ In(exchange_in)
	, St_V_Init(V, R, S, pk, i1, t_r)]
	--[]->
	[ St_V_Send_R(V, R, S, pk, i1, t_r, trs, ps)
	, Out(exchange_out)]

rule R_Recv_V:
	let
	exchange_in = <V,R,h(hid1)^ks>
	h1 = h(hid1)^ks
	psr = h1^k_r
	exchange_out = <R,V,psr>
	in
	[ In(exchange_in)
	, St_R_verif_send(R, V,sk, k_r, b1)]
	--[]->
	[St_R_Compute(R, V, sk, k_r, b1)
	, Out(exchange_out)]

rule V_Not_Model:
	let
	exchange_in = <R,V,psr>
	in
	[ St_V_Send_R(V, R, S, pk, i1, t_r, trs, ps)
	, In(exchange_in)]
	--[Neq(trs, psr)]->
	[St_V_End_Diff(V,R,S)]

rule V_Recv_R_Comp:
	let
	exchange_in = psr
	sum = add_outer(aenc{~r1}pk, snd(t_r))
	exchange_out = sum
	in
	[ St_V_Send_R(V, R, S, pk, i1, t_r, trs, ps)
	, In(exchange_in)
	, Fr(~r1)]
	--[Eq(psr, trs)]->
	[ St_V_Recv_R_Comp(V,R,S,pk,~r1, snd(t_r))
	, Out(exchange_out)]

rule R_Recv_sum:
	let
	exchange_in = add_outer(enc_r1, enc_b1)
	sum = add_outer(enc_r1, enc_b1)
	inner_sum = hom(sum, sk, pk(sk))
	exchange_out = <inner_sum>
	in
	[St_R_Compute(R, V, sk, k_r, b1)
	, In(exchange_in)]
	--[Hom_outer(sum)]->
	[Out(exchange_out), St_R_End(R,V)]

rule V_Recv_dec_sum:
	let
	exchange_in = <add_inner(a1,b1)>
	summ = fst(exchange_in)

	res = minus_inner(summ, r1)
	in
	[ St_V_Recv_R_Comp(V,R,S,pk, r1, enc_b)
	, In(exchange_in)]
	--[Eq(aenc{res}pk, enc_b)]->
	[St_V_End(V,R,S)]


lemma DH_confidentiality:
	"
	All xÂ #i.
	Aexp(x)@#i ==> not(Ex #k. KU(x)@#k)
	"

lemma label_confidentiality:
	"
	All x #i.
	Label(x)@#i ==> not(Ex #k. KU(x)@#k)
	"
lemma watermark_confidentiality:
	"
	All R x #i.
	Watermark(R, x)@#i ==> not(Ex #k. KU(x)@#k)
	"
end
